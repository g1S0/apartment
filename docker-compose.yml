version: '3.8'

services:
  user_db:
    image: postgres:15
    container_name: user_db
    environment:
      POSTGRES_USER: ${USER_DB_USERNAME}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
      POSTGRES_DB: ${USER_DB_NAME}
      PGPORT: ${CONTAINER_USER_DB_PORT}
    ports:
      - "${HOST_USER_DB_PORT}:${CONTAINER_USER_DB_PORT}"
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - app_network

  real_estate_db:
    image: postgres:15
    container_name: real_estate_db
    environment:
      POSTGRES_USER: ${REAL_ESTATE_USERNAME}
      POSTGRES_PASSWORD: ${REAL_ESTATE_PASSWORD}
      POSTGRES_DB: ${REAL_ESTATE_DB_NAME}
      PGPORT: ${CONTAINER_REAL_ESTATE_DB_PORT}
    ports:
      - "${HOST_REAL_ESTATE_DB_PORT}:${CONTAINER_REAL_ESTATE_DB_PORT}"
    volumes:
      - real_estate_db_data:/var/lib/postgresql/data
    networks:
      - app_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:2181"
    networks:
      - app_network

  notification_kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: notification_kafka
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_AUTO_CREATE_TOPICS_ENABLE}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    ports:
      - "${KAFKA_ADVERTISED_LISTENERS_PORT}:9092"
    depends_on:
      - zookeeper
    networks:
      - app_network

  tapart-service-registry:
    image: tapart-service-registry
    container_name: tapart-service-registry
    ports:
      - "${TAPART_SERVICE_REGISTRY_SERVER_PORT}:${TAPART_SERVICE_REGISTRY_SERVER_PORT}"
    environment:
      - TAPART_SERVICE_REGISTRY_SERVER_PORT=${TAPART_SERVICE_REGISTRY_SERVER_PORT}
      - TAPART_EUREKA_INSTANCE_HOSTNAME=${TAPART_EUREKA_INSTANCE_HOSTNAME}
      - TAPART_EUREKA_CLIENT_FETCH_REGISTRY=${TAPART_EUREKA_CLIENT_FETCH_REGISTRY}
      - TAPART_EUREKA_CLIENT_REGISTER_WITH_EUREKA=${TAPART_EUREKA_CLIENT_REGISTER_WITH_EUREKA}
    networks:
      - app_network

  tapart-auth:
    image: tapart-auth
    container_name: tapart-auth
    ports:
      - "${USER_SERVER_PORT}:${USER_SERVER_PORT}"
    environment:
      - USER_SERVER_PORT=${USER_SERVER_PORT}
      - USER_DB_HOST=${USER_DB_HOST}
      - USER_DB_PORT=${CONTAINER_USER_DB_PORT}
      - USER_DB_NAME=${USER_DB_NAME}
      - USER_DB_USERNAME=${USER_DB_USERNAME}
      - USER_DB_PASSWORD=${USER_DB_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - SECURITY_JWT_SECRET_KEY=${SECURITY_JWT_SECRET_KEY}
      - SECURITY_JWT_EXPIRATION=${SECURITY_JWT_EXPIRATION}
      - SECURITY_JWT_REFRESH_TOKEN_EXPIRATION=${SECURITY_JWT_REFRESH_TOKEN_EXPIRATION}
      - TAPART_EUREKA_PROTOCOL=${TAPART_EUREKA_PROTOCOL}
      - TAPART_EUREKA_INSTANCE_HOSTNAME=${TAPART_EUREKA_INSTANCE_HOSTNAME}
      - SERVICE_REGISTRY_SERVER_PORT=${SERVICE_REGISTRY_SERVER_PORT}
    depends_on:
      - user_db
      - tapart-service-registry
    networks:
      - app_network

  tapart-real-estate:
    image: tapart-real-estate
    container_name: tapart-real-estate
    ports:
      - "${REAL_ESTATE_SERVER_PORT}:${REAL_ESTATE_SERVER_PORT}"
    environment:
      - REAL_ESTATE_SERVER_PORT=${REAL_ESTATE_SERVER_PORT}
      - REAL_ESTATE_DB_HOST=${REAL_ESTATE_DB_HOST}
      - REAL_ESTATE_DB_PORT=${CONTAINER_REAL_ESTATE_DB_PORT}
      - REAL_ESTATE_DB_NAME=${REAL_ESTATE_DB_NAME}
      - REAL_ESTATE_USERNAME=${REAL_ESTATE_USERNAME}
      - REAL_ESTATE_PASSWORD=${REAL_ESTATE_PASSWORD}
      - REAL_ESTATE_AWS_S3_ACCESS_KEY=${REAL_ESTATE_AWS_S3_ACCESS_KEY}
      - REAL_ESTATE_AWS_S3_SECRET_KEY=${REAL_ESTATE_AWS_S3_SECRET_KEY}
      - REAL_ESTATE_AWS_S3_REGION=${REAL_ESTATE_AWS_S3_REGION}
      - REAL_ESTATE_AWS_S3_ENDPOINT=${REAL_ESTATE_AWS_S3_ENDPOINT}
      - REAL_ESTATE_AWS_S3_BUCKET_NAME=${REAL_ESTATE_AWS_S3_BUCKET_NAME}
      - TAPART_EUREKA_PROTOCOL=${TAPART_EUREKA_PROTOCOL}
      - TAPART_EUREKA_INSTANCE_HOSTNAME=${TAPART_EUREKA_INSTANCE_HOSTNAME}
      - SERVICE_REGISTRY_SERVER_PORT=${SERVICE_REGISTRY_SERVER_PORT}
    depends_on:
      - real_estate_db
      - tapart-service-registry
    networks:
      - app_network

  tapart-email-notification:
    image: tapart-email-notification
    container_name: tapart-email-notification
    ports:
      - "${EMAIL_NOTIFICATION_SERVER_PORT}:${EMAIL_NOTIFICATION_SERVER_PORT}"
    environment:
      - EMAIL_NOTIFICATION_SERVER_PORT=${EMAIL_NOTIFICATION_SERVER_PORT}
      - EMAIL_NOTIFICATION_MAIL_USERNAME=${EMAIL_NOTIFICATION_MAIL_USERNAME}
      - EMAIL_NOTIFICATION_MAIL_PASSWORD=${EMAIL_NOTIFICATION_MAIL_PASSWORD}
      - EMAIL_NOTIFICATION_MAIL_HOST=${EMAIL_NOTIFICATION_MAIL_HOST}
      - EMAIL_NOTIFICATION_MAIL_PORT=${EMAIL_NOTIFICATION_MAIL_PORT}
      - EMAIL_NOTIFICATION_MAIL_SMTP_AUTH=${EMAIL_NOTIFICATION_MAIL_SMTP_AUTH}
      - EMAIL_NOTIFICATION_MAIL_SMTP_STARTTLS_ENABLE=${EMAIL_NOTIFICATION_MAIL_SMTP_STARTTLS_ENABLE}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - TAPART_EUREKA_PROTOCOL=${TAPART_EUREKA_PROTOCOL}
      - TAPART_EUREKA_INSTANCE_HOSTNAME=${TAPART_EUREKA_INSTANCE_HOSTNAME}
      - SERVICE_REGISTRY_SERVER_PORT=${SERVICE_REGISTRY_SERVER_PORT}
    depends_on:
      - tapart-service-registry
      - notification_kafka
    networks:
      - app_network

  tapart-api-gateway:
    image: tapart-api-gateway
    container_name: tapart-api-gateway
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"
    environment:
      - API_GATEWAY_PORT=${API_GATEWAY_PORT}
      - TAPART_EUREKA_PROTOCOL=${TAPART_EUREKA_PROTOCOL}
      - TAPART_EUREKA_INSTANCE_HOSTNAME=${TAPART_EUREKA_INSTANCE_HOSTNAME}
      - SERVICE_REGISTRY_SERVER_PORT=${SERVICE_REGISTRY_SERVER_PORT}
    depends_on:
      - tapart-service-registry
    networks:
      - app_network

volumes:
  user_db_data:
  real_estate_db_data:

networks:
  app_network: